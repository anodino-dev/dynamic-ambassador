#!/bin/bash

function log {
    logger -p local0.info "[dynamic-registrator] $@"
}

function error {
    logger -p local0.err "[ERROR] $@"
}

{{ $local := . }}

# Registering apps...
{{ range $domain, $containers := groupByMulti $ "Env.DOMAIN_NAME" "," }}
log "Registering containers for the domain {{$domain}}..."
{{ range $index, $value := $containers }}
{{ $name := $value.Name }}
{{ with $address := index $value.Addresses 0 }}
{{ if $address.HostPort }}
JSON=$(curl -sL "$ETCD_HOST/v2/keys/apps/{{$domain}}/{{$value.ID}}" -XPUT -d value="{{$local.Env.HOST_IP}}:{{$address.HostPort}}" -d ttl=15 2>&1)
if [ $? != 0 ]; then
    error "Error, unable to register container {{$name}} (#{{$value.ID}}): $JSON"
else
    log "Container {{$name}} (#{{$value.ID}}) registered"
fi
{{ else }}
echo "Container {{$value.ID}} not registered: No port binded with the host."
{{ end }}
{{ end }}
{{ end }}
{{ end }}

# Registering services...
{{ range $port, $containers := groupByMulti $ "Env.SERVICE_PORT" "," }}
log "Registering services for the PORT {{$port}}..."
{{ range $index, $value := $containers }}
{{ $name := $value.Name }}
{{ with $address := index $value.Addresses 0 }}
{{ if $address.HostPort }}
JSON=$(curl -sL "$ETCD_HOST/v2/keys/services/{{$name}}/{{$port}}/{{$value.ID}}" -XPUT -d value="{{$local.Env.HOST_IP}}:{{$address.HostPort}}" -d ttl=15 2>&1)
if [ $? != 0 ]; then
    error "Error, unable to register container {{$name}} (#{{$value.ID}}): $JSON"
else
    log "Container {{$name}} (#{{$value.ID}}) registered"
fi
{{ else }}
echo "Container {{$value.ID}} not registered: No port binded with the host."
{{ end }}
{{ end }}
{{ end }}
{{ end }}

